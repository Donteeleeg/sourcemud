// NPC extensions
// Copyright (C) 2002  AwesomePlay Productions, Inc.

// random portal walking for NPCs
function goRandomPortal(self)
{
	// round time?
	if (self.getRoundTime() > 0)
		return false;

	// get room
	var room = self.room();
	if (!room)
		return false;

	// get count
	var portals = array();
	foreach(var portal in room.portals())
		if (self.canUsePortal(portal))
			portals.append(portal);
	if (!portals)
		return false;

	// random selection
	var rand = getRandom(portals.length());
	self.doGo(portals[rand]);
	return true;
}

// attack a random player
function attackRandomPlayer(self)
{
	var room = self.getRoom();
	if (!room)
		return;

	// round time?  cancel
	if (self.getRoundTime() > 0)
		return;

	// get list of all players in the room
	var players = array();
	foreach(var cr in room.creatures())
		if (!cr.isDead())
			if (Player(cr))
				players.append(cr);

	// if there are any players...
	if (players) {
		// get target
		var i = getRandom(0, players.length());
		var target = players[i];

		// attack!
		self.attack(target);
		return true;
	}

	// nothing to attack
	return false;
}

// AI state handling
function setState(self, state)
{
	state = String(state);
	if (self.ai_state != state) {
		self.ai_state = state;
		self.pumpAI('state');
	}
}

// generate a corpse
function makeCorpse(npc)
{
	// npc must be in a room
	var room = npc.getRoom();
	if (!room)
		return;

	// make the corpse object
	var corpse = createObjectFromBlueprint('npc_corpse');
	if (!corpse) {
		error('Failed to find npc_corpse blueprint');
		return;
	}

	// note npc blueprint
	corpse.npc_blueprint = npc.getBlueprint().getId();

	// rename corpse
	var cname = npc.corpse_name;
	if (cname)
		corpse.setBaseName(cname);
	else
		corpse.setBaseName(npc.getBaseName() .. ' corpse');

	// move equipment over
	while (var obj = npc.getEquipAt(0))
		if (obj.isDropable())
			corpse.addObject(obj, CON_ON);
		else
			obj.destroy();

	// add corpse to room
	room.addObject(corpse);

	// destroy npc
	npc.destroy();
}

// save NPC blueprint on corpse
function saveCorpseBlueprint(object, writer)
{
	if (String(object.npc_blueprint))
		writer.setString('npc_blueprint', object.npc_blueprint);
}

function init() {
	registerHook('save_object', saveCorpseBlueprint);
	registerHook('npc_death', makeCorpse);

	NPC.addMethod('goRandomPortal', goRandomPortal);
	NPC.addMethod('attackRandomPlayer', attackRandomPlayer);
	NPC.addMethod('setState', setState);
}
