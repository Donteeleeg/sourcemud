<?xml version="1.0"?>
<xsl:stylesheet version="1.1" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="text"/>
  <xsl:template match="/events">

<!-- header -->
<xsl:text><![CDATA[
// Generated by events-header.xsl
// DO NOT EDIT

#ifndef EVENT_IDS_H
#define EVENT_IDS_H

class Room;
class Entity;
class Object;
class Portal;
class Zone;

class EventID {
	public:
	typedef enum {
		NONE = 0,
	]]></xsl:text>
	<xsl:for-each select="event">
  		<xsl:value-of select="@name"/><xsl:text>,</xsl:text>
	</xsl:for-each>
	<xsl:text><![CDATA[
		COUNT,
	} type_t;
	
	explicit EventID (int s_value) : value((type_t)s_value) {}
	EventID (type_t s_value) : value(s_value) {}
	EventID (const EventID& event) : value(event.value) {}
	EventID () : value(NONE) {}

	String get_name() const { return names[value]; }

	type_t get_value () const { return value; }

	static EventID lookup (String name);

	bool valid () const { return value != NONE; }

	bool operator == (EventID dir) const { return dir.value == value; }
	bool operator != (EventID dir) const { return dir.value != value; }
	bool operator < (EventID dir) const { return value < dir.value; }

	private:
	type_t value;

	static String names[];
};

namespace Events {
]]></xsl:text>

<!-- event ids -->
<xsl:for-each select="event">
  <xsl:text>void send</xsl:text><xsl:value-of select="@name" />
  <xsl:text>(Room* room</xsl:text>
  <xsl:if test="actor"><xsl:text>, </xsl:text><xsl:value-of select="actor/@type" />* actor</xsl:if>
  <xsl:if test="target"><xsl:text>, </xsl:text><xsl:value-of select="target/@type" />* target</xsl:if>
  <xsl:if test="aux"><xsl:text>, </xsl:text><xsl:value-of select="aux/@type" />* aux</xsl:if>
  <xsl:apply-templates select="arg" />
  <xsl:text>);</xsl:text>
</xsl:for-each>

<!-- footer -->
<xsl:text><![CDATA[
} // namespace Events

#endif // EVENT_IDS_H
]]></xsl:text>

  </xsl:template>

  <xsl:template match="arg">
    <xsl:text>, </xsl:text>
    <xsl:choose>
      <xsl:when test="@type='String'">
        <xsl:text>String </xsl:text>
      </xsl:when>
      <xsl:when test="@type='Integer'">
        <xsl:text>long </xsl:text>
      </xsl:when>
      <xsl:when test="@type='Boolean'">
        <xsl:text>bool </xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="@type" />
        <xsl:text>* </xsl:text>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:value-of select="@name" />
  </xsl:template>
</xsl:stylesheet>
