<?xml version="1.0"?>
<xsl:stylesheet version="1.1" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="text"/>
  <xsl:template match="/skills">

<xsl:text><![CDATA[
// Generated by skills-header.xsl
// DO NOT EDIT

#ifndef SKILL_IDS_H
#define SKILL_IDS_H

class SkillID {
	public:
	typedef enum {
		NONE = 0,
	]]></xsl:text>
	<xsl:for-each select="skill">
  		<xsl:value-of select="translate(@name, ' ', '')"/><xsl:text>,</xsl:text>
	</xsl:for-each>
	<xsl:text><![CDATA[
		COUNT,
	} type_t;
	
	explicit SkillID (int s_value) : value((type_t)s_value) {}
	SkillID (type_t s_value) : value(s_value) {}
	SkillID (const SkillID& event) : value(event.value) {}
	SkillID () : value(NONE) {}

	String get_name() const { return names[value]; }

	type_t get_value () const { return value; }

	static SkillID lookup (String name);

	bool valid () const { return value != NONE; }

	bool operator == (SkillID dir) const { return dir.value == value; }
	bool operator != (SkillID dir) const { return dir.value != value; }
	bool operator < (SkillID dir) const { return value < dir.value; }

	private:
	type_t value;

	static String names[];
};

#endif
]]></xsl:text>
  </xsl:template>
</xsl:stylesheet>
